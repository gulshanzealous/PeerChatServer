/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("dgram");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _dgram = __webpack_require__(0);

var _dgram2 = _interopRequireDefault(_dgram);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var udpServer = _dgram2.default.createSocket('udp4');

var UdpSocket = function UdpSocket(id, firstAddress, firstPort, dataInit, initiated, secondAddress, secondPort, terminated) {
	_classCallCheck(this, UdpSocket);

	this.id = id;
	this.firstAddress = firstAddress;
	this.firstPort = firstPort;
	this.dataInit = dataInit;
	this.initiated = 'false';
	this.secondAddress = secondAddress || null;
	this.secondPort = secondPort || null;
	this.terminated = 'false';
};

var udpSockets = [];

udpServer.on('message', function (rawmsg, rinfo) {
	console.log('udpSockets:' + JSON.stringify(udpSockets, null, 4));

	var _rawmsg$toString$trim = rawmsg.toString('utf8').trim().split('.'),
	    _rawmsg$toString$trim2 = _slicedToArray(_rawmsg$toString$trim, 3),
	    id = _rawmsg$toString$trim2[0],
	    terminated = _rawmsg$toString$trim2[1],
	    data = _rawmsg$toString$trim2[2]; // this should be done by video format


	var address = rinfo.address,
	    port = rinfo.port;


	console.log('incoming id:' + id + ',terminated:' + terminated + ',data:' + data + ',address:' + address + ',port:' + port);

	// udpServer.send( Buffer.from('connected to server'), address, port )

	var socketMatchArray = udpSockets.filter(function (socket) {
		return socket.id === id;
	});
	var socket = socketMatchArray[0];

	console.log('socket matched:' + JSON.stringify(socket, null, 4));

	if (socket === null || socket === undefined || socket === {} || socket === []) {
		// no one from this pair has ever resistered
		console.log('never registered before');
		var _socket = new UdpSocket(id, address, port, data);
		udpSockets.push(_socket);
		udpServer.send(Buffer.from('Server: You have been registered\n'), port, address);
	} else if (socket.initiated === 'true') {
		// mathed id and has connected before. subsequent message
		// this means both the leeches have connected atleast once, only check for these two's credentials
		if (socket.terminated === 'true') {

			udpServer.send(Buffer.from('Server: Session expired'), socket.firstPort, socket.firstAddress);
			udpServer.send(Buffer.from('Server: Session expired'), socket.secondPort, socket.secondAddress);
		} else if (address === socket.firstAddress && port === socket.firstPort) {

			console.log('first socket');
			udpServer.send(Buffer.from(data), socket.secondPort, socket.secondAddress);
			socket.terminated = terminated;
		} else if (address === socket.secondAddress && port === socket.secondPort) {

			console.log('second socket');
			udpServer.send(Buffer.from(data), socket.firstPort, socket.firstAddress);
			socket.terminated = terminated;
		} else {

			udpServer.send(Buffer.from('error occurred'), socket.firstPort, socket.firstAddress);
			udpServer.send(Buffer.from('error occurred'), socket.secondPort, socket.secondAddress);
		}
	} else {
		//( socket.initiated === false )
		// matched id and this is first connection of this pair
		// this means the first leech has registered but second has not, this is the second for the first time
		if (socket.firstPort === port) {
			//same leech found itself, tell it to wait for the other one
			return udpServer.send(Buffer.from('wait for the other one'), socket.firstPort, socket.firstAddress);
		}
		udpServer.send(Buffer.from(socket.dataInit), port, address);
		udpServer.send(Buffer.from(data), firstPort, firstAddress);
		socket.initiated = 'true';
		socket.secondAddress = address;
		socket.secondPort = port;
	}
});

udpServer.on('listening', function () {
	var address = udpServer.address();
	console.log('udpServer listening ' + address.address + ':' + address.port);
});

udpServer.on('error', function (err) {
	console.log('udpServer error:\n' + err.stack);
	udpServer.close();
});

udpServer.bind(33476, '192.168.0.102', function () {
	var address = udpServer.address();
	console.log('udpServer bound at ' + address.address + ':' + address.port);
});

/***/ })
/******/ ]);